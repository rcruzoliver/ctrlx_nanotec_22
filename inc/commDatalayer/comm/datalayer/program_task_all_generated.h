// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PROGRAMTASKALL_COMM_DATALAYER_H_
#define FLATBUFFERS_GENERATED_PROGRAMTASKALL_COMM_DATALAYER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 4,
             "Non-compatible flatbuffers version included");

#include "program_task_generated.h"

namespace comm {
namespace datalayer {

struct ProgramTaskAll;
struct ProgramTaskAllBuilder;
struct ProgramTaskAllT;

struct ProgramTaskAllT : public ::flatbuffers::NativeTable {
  typedef ProgramTaskAll TableType;
  std::vector<std::unique_ptr<comm::datalayer::ProgramTaskT>> Tasks{};
  ProgramTaskAllT() = default;
  ProgramTaskAllT(const ProgramTaskAllT &o);
  ProgramTaskAllT(ProgramTaskAllT&&) FLATBUFFERS_NOEXCEPT = default;
  ProgramTaskAllT &operator=(ProgramTaskAllT o) FLATBUFFERS_NOEXCEPT;
};

struct ProgramTaskAll FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ProgramTaskAllT NativeTableType;
  typedef ProgramTaskAllBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TASKS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::ProgramTask>> *Tasks() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::ProgramTask>> *>(VT_TASKS);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::ProgramTask>> *mutable_Tasks() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::ProgramTask>> *>(VT_TASKS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TASKS) &&
           verifier.VerifyVector(Tasks()) &&
           verifier.VerifyVectorOfTables(Tasks()) &&
           verifier.EndTable();
  }
  ProgramTaskAllT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ProgramTaskAllT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<ProgramTaskAll> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ProgramTaskAllT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ProgramTaskAllBuilder {
  typedef ProgramTaskAll Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Tasks(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::ProgramTask>>> Tasks) {
    fbb_.AddOffset(ProgramTaskAll::VT_TASKS, Tasks);
  }
  explicit ProgramTaskAllBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ProgramTaskAll> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ProgramTaskAll>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ProgramTaskAll> CreateProgramTaskAll(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::ProgramTask>>> Tasks = 0) {
  ProgramTaskAllBuilder builder_(_fbb);
  builder_.add_Tasks(Tasks);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ProgramTaskAll> CreateProgramTaskAllDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<::flatbuffers::Offset<comm::datalayer::ProgramTask>> *Tasks = nullptr) {
  auto Tasks__ = Tasks ? _fbb.CreateVectorOfSortedTables<comm::datalayer::ProgramTask>(Tasks) : 0;
  return comm::datalayer::CreateProgramTaskAll(
      _fbb,
      Tasks__);
}

::flatbuffers::Offset<ProgramTaskAll> CreateProgramTaskAll(::flatbuffers::FlatBufferBuilder &_fbb, const ProgramTaskAllT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ProgramTaskAllT::ProgramTaskAllT(const ProgramTaskAllT &o) {
  Tasks.reserve(o.Tasks.size());
  for (const auto &Tasks_ : o.Tasks) { Tasks.emplace_back((Tasks_) ? new comm::datalayer::ProgramTaskT(*Tasks_) : nullptr); }
}

inline ProgramTaskAllT &ProgramTaskAllT::operator=(ProgramTaskAllT o) FLATBUFFERS_NOEXCEPT {
  std::swap(Tasks, o.Tasks);
  return *this;
}

inline ProgramTaskAllT *ProgramTaskAll::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ProgramTaskAllT>(new ProgramTaskAllT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ProgramTaskAll::UnPackTo(ProgramTaskAllT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Tasks(); if (_e) { _o->Tasks.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->Tasks[_i]) { _e->Get(_i)->UnPackTo(_o->Tasks[_i].get(), _resolver); } else { _o->Tasks[_i] = std::unique_ptr<comm::datalayer::ProgramTaskT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->Tasks.resize(0); } }
}

inline ::flatbuffers::Offset<ProgramTaskAll> ProgramTaskAll::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ProgramTaskAllT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateProgramTaskAll(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<ProgramTaskAll> CreateProgramTaskAll(::flatbuffers::FlatBufferBuilder &_fbb, const ProgramTaskAllT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const ProgramTaskAllT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Tasks = _o->Tasks.size() ? _fbb.CreateVector<::flatbuffers::Offset<comm::datalayer::ProgramTask>> (_o->Tasks.size(), [](size_t i, _VectorArgs *__va) { return CreateProgramTask(*__va->__fbb, __va->__o->Tasks[i].get(), __va->__rehasher); }, &_va ) : 0;
  return comm::datalayer::CreateProgramTaskAll(
      _fbb,
      _Tasks);
}

inline const comm::datalayer::ProgramTaskAll *GetProgramTaskAll(const void *buf) {
  return ::flatbuffers::GetRoot<comm::datalayer::ProgramTaskAll>(buf);
}

inline const comm::datalayer::ProgramTaskAll *GetSizePrefixedProgramTaskAll(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<comm::datalayer::ProgramTaskAll>(buf);
}

inline ProgramTaskAll *GetMutableProgramTaskAll(void *buf) {
  return ::flatbuffers::GetMutableRoot<ProgramTaskAll>(buf);
}

inline comm::datalayer::ProgramTaskAll *GetMutableSizePrefixedProgramTaskAll(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<comm::datalayer::ProgramTaskAll>(buf);
}

inline bool VerifyProgramTaskAllBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<comm::datalayer::ProgramTaskAll>(nullptr);
}

inline bool VerifySizePrefixedProgramTaskAllBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<comm::datalayer::ProgramTaskAll>(nullptr);
}

inline void FinishProgramTaskAllBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::ProgramTaskAll> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedProgramTaskAllBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::ProgramTaskAll> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<comm::datalayer::ProgramTaskAllT> UnPackProgramTaskAll(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::ProgramTaskAllT>(GetProgramTaskAll(buf)->UnPack(res));
}

inline std::unique_ptr<comm::datalayer::ProgramTaskAllT> UnPackSizePrefixedProgramTaskAll(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::ProgramTaskAllT>(GetSizePrefixedProgramTaskAll(buf)->UnPack(res));
}

}  // namespace datalayer
}  // namespace comm

#endif  // FLATBUFFERS_GENERATED_PROGRAMTASKALL_COMM_DATALAYER_H_
