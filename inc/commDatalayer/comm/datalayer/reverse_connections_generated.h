// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_REVERSECONNECTIONS_COMM_DATALAYER_REMOTE_H_
#define FLATBUFFERS_GENERATED_REVERSECONNECTIONS_COMM_DATALAYER_REMOTE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 4,
             "Non-compatible flatbuffers version included");

#include "reverse_connection_generated.h"

namespace comm {
namespace datalayer {
namespace remote {

struct ReverseConnections;
struct ReverseConnectionsBuilder;
struct ReverseConnectionsT;

struct ReverseConnectionsT : public ::flatbuffers::NativeTable {
  typedef ReverseConnections TableType;
  std::vector<std::unique_ptr<comm::datalayer::remote::ReverseConnectionT>> reverse_connections{};
  ReverseConnectionsT() = default;
  ReverseConnectionsT(const ReverseConnectionsT &o);
  ReverseConnectionsT(ReverseConnectionsT&&) FLATBUFFERS_NOEXCEPT = default;
  ReverseConnectionsT &operator=(ReverseConnectionsT o) FLATBUFFERS_NOEXCEPT;
};

struct ReverseConnections FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ReverseConnectionsT NativeTableType;
  typedef ReverseConnectionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REVERSE_CONNECTIONS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::remote::ReverseConnection>> *reverse_connections() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::remote::ReverseConnection>> *>(VT_REVERSE_CONNECTIONS);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::remote::ReverseConnection>> *mutable_reverse_connections() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::remote::ReverseConnection>> *>(VT_REVERSE_CONNECTIONS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_REVERSE_CONNECTIONS) &&
           verifier.VerifyVector(reverse_connections()) &&
           verifier.VerifyVectorOfTables(reverse_connections()) &&
           verifier.EndTable();
  }
  ReverseConnectionsT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ReverseConnectionsT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<ReverseConnections> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ReverseConnectionsT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ReverseConnectionsBuilder {
  typedef ReverseConnections Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_reverse_connections(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::remote::ReverseConnection>>> reverse_connections) {
    fbb_.AddOffset(ReverseConnections::VT_REVERSE_CONNECTIONS, reverse_connections);
  }
  explicit ReverseConnectionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ReverseConnections> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ReverseConnections>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ReverseConnections> CreateReverseConnections(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::remote::ReverseConnection>>> reverse_connections = 0) {
  ReverseConnectionsBuilder builder_(_fbb);
  builder_.add_reverse_connections(reverse_connections);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ReverseConnections> CreateReverseConnectionsDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<::flatbuffers::Offset<comm::datalayer::remote::ReverseConnection>> *reverse_connections = nullptr) {
  auto reverse_connections__ = reverse_connections ? _fbb.CreateVectorOfSortedTables<comm::datalayer::remote::ReverseConnection>(reverse_connections) : 0;
  return comm::datalayer::remote::CreateReverseConnections(
      _fbb,
      reverse_connections__);
}

::flatbuffers::Offset<ReverseConnections> CreateReverseConnections(::flatbuffers::FlatBufferBuilder &_fbb, const ReverseConnectionsT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ReverseConnectionsT::ReverseConnectionsT(const ReverseConnectionsT &o) {
  reverse_connections.reserve(o.reverse_connections.size());
  for (const auto &reverse_connections_ : o.reverse_connections) { reverse_connections.emplace_back((reverse_connections_) ? new comm::datalayer::remote::ReverseConnectionT(*reverse_connections_) : nullptr); }
}

inline ReverseConnectionsT &ReverseConnectionsT::operator=(ReverseConnectionsT o) FLATBUFFERS_NOEXCEPT {
  std::swap(reverse_connections, o.reverse_connections);
  return *this;
}

inline ReverseConnectionsT *ReverseConnections::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ReverseConnectionsT>(new ReverseConnectionsT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ReverseConnections::UnPackTo(ReverseConnectionsT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = reverse_connections(); if (_e) { _o->reverse_connections.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->reverse_connections[_i]) { _e->Get(_i)->UnPackTo(_o->reverse_connections[_i].get(), _resolver); } else { _o->reverse_connections[_i] = std::unique_ptr<comm::datalayer::remote::ReverseConnectionT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->reverse_connections.resize(0); } }
}

inline ::flatbuffers::Offset<ReverseConnections> ReverseConnections::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ReverseConnectionsT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateReverseConnections(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<ReverseConnections> CreateReverseConnections(::flatbuffers::FlatBufferBuilder &_fbb, const ReverseConnectionsT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const ReverseConnectionsT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _reverse_connections = _o->reverse_connections.size() ? _fbb.CreateVector<::flatbuffers::Offset<comm::datalayer::remote::ReverseConnection>> (_o->reverse_connections.size(), [](size_t i, _VectorArgs *__va) { return CreateReverseConnection(*__va->__fbb, __va->__o->reverse_connections[i].get(), __va->__rehasher); }, &_va ) : 0;
  return comm::datalayer::remote::CreateReverseConnections(
      _fbb,
      _reverse_connections);
}

inline const comm::datalayer::remote::ReverseConnections *GetReverseConnections(const void *buf) {
  return ::flatbuffers::GetRoot<comm::datalayer::remote::ReverseConnections>(buf);
}

inline const comm::datalayer::remote::ReverseConnections *GetSizePrefixedReverseConnections(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<comm::datalayer::remote::ReverseConnections>(buf);
}

inline ReverseConnections *GetMutableReverseConnections(void *buf) {
  return ::flatbuffers::GetMutableRoot<ReverseConnections>(buf);
}

inline comm::datalayer::remote::ReverseConnections *GetMutableSizePrefixedReverseConnections(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<comm::datalayer::remote::ReverseConnections>(buf);
}

inline bool VerifyReverseConnectionsBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<comm::datalayer::remote::ReverseConnections>(nullptr);
}

inline bool VerifySizePrefixedReverseConnectionsBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<comm::datalayer::remote::ReverseConnections>(nullptr);
}

inline void FinishReverseConnectionsBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::remote::ReverseConnections> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedReverseConnectionsBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::remote::ReverseConnections> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<comm::datalayer::remote::ReverseConnectionsT> UnPackReverseConnections(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::remote::ReverseConnectionsT>(GetReverseConnections(buf)->UnPack(res));
}

inline std::unique_ptr<comm::datalayer::remote::ReverseConnectionsT> UnPackSizePrefixedReverseConnections(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::remote::ReverseConnectionsT>(GetSizePrefixedReverseConnections(buf)->UnPack(res));
}

}  // namespace remote
}  // namespace datalayer
}  // namespace comm

#endif  // FLATBUFFERS_GENERATED_REVERSECONNECTIONS_COMM_DATALAYER_REMOTE_H_
