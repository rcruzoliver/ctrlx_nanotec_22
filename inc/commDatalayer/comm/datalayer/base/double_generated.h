// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DOUBLE_COMM_DATALAYER_H_
#define FLATBUFFERS_GENERATED_DOUBLE_COMM_DATALAYER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 4,
             "Non-compatible flatbuffers version included");

namespace comm {
namespace datalayer {

struct Double;
struct DoubleBuilder;
struct DoubleT;

struct DoubleT : public ::flatbuffers::NativeTable {
  typedef Double TableType;
  double value = 0.0;
};

struct Double FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DoubleT NativeTableType;
  typedef DoubleBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  double value() const {
    return GetField<double>(VT_VALUE, 0.0);
  }
  bool mutate_value(double _value = 0.0) {
    return SetField<double>(VT_VALUE, _value, 0.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_VALUE, 8) &&
           verifier.EndTable();
  }
  DoubleT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(DoubleT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Double> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const DoubleT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct DoubleBuilder {
  typedef Double Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(double value) {
    fbb_.AddElement<double>(Double::VT_VALUE, value, 0.0);
  }
  explicit DoubleBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Double> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Double>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Double> CreateDouble(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    double value = 0.0) {
  DoubleBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

::flatbuffers::Offset<Double> CreateDouble(::flatbuffers::FlatBufferBuilder &_fbb, const DoubleT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline DoubleT *Double::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<DoubleT>(new DoubleT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Double::UnPackTo(DoubleT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = value(); _o->value = _e; }
}

inline ::flatbuffers::Offset<Double> Double::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const DoubleT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateDouble(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Double> CreateDouble(::flatbuffers::FlatBufferBuilder &_fbb, const DoubleT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const DoubleT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _value = _o->value;
  return comm::datalayer::CreateDouble(
      _fbb,
      _value);
}

inline const comm::datalayer::Double *GetDouble(const void *buf) {
  return ::flatbuffers::GetRoot<comm::datalayer::Double>(buf);
}

inline const comm::datalayer::Double *GetSizePrefixedDouble(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<comm::datalayer::Double>(buf);
}

inline Double *GetMutableDouble(void *buf) {
  return ::flatbuffers::GetMutableRoot<Double>(buf);
}

inline comm::datalayer::Double *GetMutableSizePrefixedDouble(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<comm::datalayer::Double>(buf);
}

inline bool VerifyDoubleBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<comm::datalayer::Double>(nullptr);
}

inline bool VerifySizePrefixedDoubleBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<comm::datalayer::Double>(nullptr);
}

inline void FinishDoubleBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::Double> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDoubleBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::Double> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<comm::datalayer::DoubleT> UnPackDouble(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::DoubleT>(GetDouble(buf)->UnPack(res));
}

inline std::unique_ptr<comm::datalayer::DoubleT> UnPackSizePrefixedDouble(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::DoubleT>(GetSizePrefixedDouble(buf)->UnPack(res));
}

}  // namespace datalayer
}  // namespace comm

#endif  // FLATBUFFERS_GENERATED_DOUBLE_COMM_DATALAYER_H_
