// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PROVIDERSTATS_COMM_DATALAYER_H_
#define FLATBUFFERS_GENERATED_PROVIDERSTATS_COMM_DATALAYER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 4,
             "Non-compatible flatbuffers version included");

#include "provider_stat_generated.h"

namespace comm {
namespace datalayer {

struct ProviderStats;
struct ProviderStatsBuilder;
struct ProviderStatsT;

struct ProviderStatsT : public ::flatbuffers::NativeTable {
  typedef ProviderStats TableType;
  std::vector<std::unique_ptr<comm::datalayer::ProviderStatT>> providers{};
  ProviderStatsT() = default;
  ProviderStatsT(const ProviderStatsT &o);
  ProviderStatsT(ProviderStatsT&&) FLATBUFFERS_NOEXCEPT = default;
  ProviderStatsT &operator=(ProviderStatsT o) FLATBUFFERS_NOEXCEPT;
};

/// statistics of all providers
struct ProviderStats FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ProviderStatsT NativeTableType;
  typedef ProviderStatsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PROVIDERS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::ProviderStat>> *providers() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::ProviderStat>> *>(VT_PROVIDERS);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::ProviderStat>> *mutable_providers() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::ProviderStat>> *>(VT_PROVIDERS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PROVIDERS) &&
           verifier.VerifyVector(providers()) &&
           verifier.VerifyVectorOfTables(providers()) &&
           verifier.EndTable();
  }
  ProviderStatsT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ProviderStatsT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<ProviderStats> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ProviderStatsT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ProviderStatsBuilder {
  typedef ProviderStats Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_providers(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::ProviderStat>>> providers) {
    fbb_.AddOffset(ProviderStats::VT_PROVIDERS, providers);
  }
  explicit ProviderStatsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ProviderStats> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ProviderStats>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ProviderStats> CreateProviderStats(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::ProviderStat>>> providers = 0) {
  ProviderStatsBuilder builder_(_fbb);
  builder_.add_providers(providers);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ProviderStats> CreateProviderStatsDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<comm::datalayer::ProviderStat>> *providers = nullptr) {
  auto providers__ = providers ? _fbb.CreateVector<::flatbuffers::Offset<comm::datalayer::ProviderStat>>(*providers) : 0;
  return comm::datalayer::CreateProviderStats(
      _fbb,
      providers__);
}

::flatbuffers::Offset<ProviderStats> CreateProviderStats(::flatbuffers::FlatBufferBuilder &_fbb, const ProviderStatsT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ProviderStatsT::ProviderStatsT(const ProviderStatsT &o) {
  providers.reserve(o.providers.size());
  for (const auto &providers_ : o.providers) { providers.emplace_back((providers_) ? new comm::datalayer::ProviderStatT(*providers_) : nullptr); }
}

inline ProviderStatsT &ProviderStatsT::operator=(ProviderStatsT o) FLATBUFFERS_NOEXCEPT {
  std::swap(providers, o.providers);
  return *this;
}

inline ProviderStatsT *ProviderStats::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ProviderStatsT>(new ProviderStatsT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ProviderStats::UnPackTo(ProviderStatsT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = providers(); if (_e) { _o->providers.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->providers[_i]) { _e->Get(_i)->UnPackTo(_o->providers[_i].get(), _resolver); } else { _o->providers[_i] = std::unique_ptr<comm::datalayer::ProviderStatT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->providers.resize(0); } }
}

inline ::flatbuffers::Offset<ProviderStats> ProviderStats::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ProviderStatsT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateProviderStats(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<ProviderStats> CreateProviderStats(::flatbuffers::FlatBufferBuilder &_fbb, const ProviderStatsT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const ProviderStatsT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _providers = _o->providers.size() ? _fbb.CreateVector<::flatbuffers::Offset<comm::datalayer::ProviderStat>> (_o->providers.size(), [](size_t i, _VectorArgs *__va) { return CreateProviderStat(*__va->__fbb, __va->__o->providers[i].get(), __va->__rehasher); }, &_va ) : 0;
  return comm::datalayer::CreateProviderStats(
      _fbb,
      _providers);
}

inline const comm::datalayer::ProviderStats *GetProviderStats(const void *buf) {
  return ::flatbuffers::GetRoot<comm::datalayer::ProviderStats>(buf);
}

inline const comm::datalayer::ProviderStats *GetSizePrefixedProviderStats(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<comm::datalayer::ProviderStats>(buf);
}

inline ProviderStats *GetMutableProviderStats(void *buf) {
  return ::flatbuffers::GetMutableRoot<ProviderStats>(buf);
}

inline comm::datalayer::ProviderStats *GetMutableSizePrefixedProviderStats(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<comm::datalayer::ProviderStats>(buf);
}

inline bool VerifyProviderStatsBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<comm::datalayer::ProviderStats>(nullptr);
}

inline bool VerifySizePrefixedProviderStatsBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<comm::datalayer::ProviderStats>(nullptr);
}

inline void FinishProviderStatsBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::ProviderStats> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedProviderStatsBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::ProviderStats> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<comm::datalayer::ProviderStatsT> UnPackProviderStats(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::ProviderStatsT>(GetProviderStats(buf)->UnPack(res));
}

inline std::unique_ptr<comm::datalayer::ProviderStatsT> UnPackSizePrefixedProviderStats(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::ProviderStatsT>(GetSizePrefixedProviderStats(buf)->UnPack(res));
}

}  // namespace datalayer
}  // namespace comm

#endif  // FLATBUFFERS_GENERATED_PROVIDERSTATS_COMM_DATALAYER_H_
