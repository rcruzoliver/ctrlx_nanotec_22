// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MEMORYMAP_COMM_DATALAYER_H_
#define FLATBUFFERS_GENERATED_MEMORYMAP_COMM_DATALAYER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 4,
             "Non-compatible flatbuffers version included");

#include "metadata_generated.h"

namespace comm {
namespace datalayer {

struct Variable;
struct VariableBuilder;
struct VariableT;

struct MemoryMap;
struct MemoryMapBuilder;
struct MemoryMapT;

struct VariableT : public ::flatbuffers::NativeTable {
  typedef Variable TableType;
  std::string name{};
  uint32_t bitoffset = 0;
  uint32_t bitsize = 0;
  std::string type{};
  std::unique_ptr<comm::datalayer::MetadataT> metadata{};
  VariableT() = default;
  VariableT(const VariableT &o);
  VariableT(VariableT&&) FLATBUFFERS_NOEXCEPT = default;
  VariableT &operator=(VariableT o) FLATBUFFERS_NOEXCEPT;
};

struct Variable FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef VariableT NativeTableType;
  typedef VariableBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_BITOFFSET = 6,
    VT_BITSIZE = 8,
    VT_TYPE = 10,
    VT_METADATA = 12
  };
  /// Name of the variable
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  ::flatbuffers::String *mutable_name() {
    return GetPointer<::flatbuffers::String *>(VT_NAME);
  }
  bool KeyCompareLessThan(const Variable * const o) const {
    return *name() < *o->name();
  }
  int KeyCompareWithValue(const char *_name) const {
    return strcmp(name()->c_str(), _name);
  }
  /// Offset (in bits) of variable in memory
  uint32_t bitoffset() const {
    return GetField<uint32_t>(VT_BITOFFSET, 0);
  }
  bool mutate_bitoffset(uint32_t _bitoffset = 0) {
    return SetField<uint32_t>(VT_BITOFFSET, _bitoffset, 0);
  }
  /// Size (in bits) of variable in memory
  uint32_t bitsize() const {
    return GetField<uint32_t>(VT_BITSIZE, 0);
  }
  bool mutate_bitsize(uint32_t _bitsize = 0) {
    return SetField<uint32_t>(VT_BITSIZE, _bitsize, 0);
  }
  /// type information
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  ::flatbuffers::String *mutable_type() {
    return GetPointer<::flatbuffers::String *>(VT_TYPE);
  }
  /// metadata of the variable
  const comm::datalayer::Metadata *metadata() const {
    return GetPointer<const comm::datalayer::Metadata *>(VT_METADATA);
  }
  comm::datalayer::Metadata *mutable_metadata() {
    return GetPointer<comm::datalayer::Metadata *>(VT_METADATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint32_t>(verifier, VT_BITOFFSET, 4) &&
           VerifyField<uint32_t>(verifier, VT_BITSIZE, 4) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_METADATA) &&
           verifier.VerifyTable(metadata()) &&
           verifier.EndTable();
  }
  VariableT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(VariableT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Variable> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const VariableT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct VariableBuilder {
  typedef Variable Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Variable::VT_NAME, name);
  }
  void add_bitoffset(uint32_t bitoffset) {
    fbb_.AddElement<uint32_t>(Variable::VT_BITOFFSET, bitoffset, 0);
  }
  void add_bitsize(uint32_t bitsize) {
    fbb_.AddElement<uint32_t>(Variable::VT_BITSIZE, bitsize, 0);
  }
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(Variable::VT_TYPE, type);
  }
  void add_metadata(::flatbuffers::Offset<comm::datalayer::Metadata> metadata) {
    fbb_.AddOffset(Variable::VT_METADATA, metadata);
  }
  explicit VariableBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Variable> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Variable>(end);
    fbb_.Required(o, Variable::VT_NAME);
    return o;
  }
};

inline ::flatbuffers::Offset<Variable> CreateVariable(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    uint32_t bitoffset = 0,
    uint32_t bitsize = 0,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    ::flatbuffers::Offset<comm::datalayer::Metadata> metadata = 0) {
  VariableBuilder builder_(_fbb);
  builder_.add_metadata(metadata);
  builder_.add_type(type);
  builder_.add_bitsize(bitsize);
  builder_.add_bitoffset(bitoffset);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Variable> CreateVariableDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    uint32_t bitoffset = 0,
    uint32_t bitsize = 0,
    const char *type = nullptr,
    ::flatbuffers::Offset<comm::datalayer::Metadata> metadata = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  return comm::datalayer::CreateVariable(
      _fbb,
      name__,
      bitoffset,
      bitsize,
      type__,
      metadata);
}

::flatbuffers::Offset<Variable> CreateVariable(::flatbuffers::FlatBufferBuilder &_fbb, const VariableT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct MemoryMapT : public ::flatbuffers::NativeTable {
  typedef MemoryMap TableType;
  std::vector<std::unique_ptr<comm::datalayer::VariableT>> variables{};
  uint32_t revision = 0;
  bool disableInputImage = false;
  MemoryMapT() = default;
  MemoryMapT(const MemoryMapT &o);
  MemoryMapT(MemoryMapT&&) FLATBUFFERS_NOEXCEPT = default;
  MemoryMapT &operator=(MemoryMapT o) FLATBUFFERS_NOEXCEPT;
};

struct MemoryMap FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MemoryMapT NativeTableType;
  typedef MemoryMapBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VARIABLES = 4,
    VT_REVISION = 6,
    VT_DISABLEINPUTIMAGE = 8
  };
  /// array of variables
  const ::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::Variable>> *variables() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::Variable>> *>(VT_VARIABLES);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::Variable>> *mutable_variables() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::Variable>> *>(VT_VARIABLES);
  }
  /// revision number- changes every time on variables changes
  uint32_t revision() const {
    return GetField<uint32_t>(VT_REVISION, 0);
  }
  bool mutate_revision(uint32_t _revision = 0) {
    return SetField<uint32_t>(VT_REVISION, _revision, 0);
  }
  /// Disable input buffer so save one copy from image to data
  bool disableInputImage() const {
    return GetField<uint8_t>(VT_DISABLEINPUTIMAGE, 0) != 0;
  }
  bool mutate_disableInputImage(bool _disableInputImage = 0) {
    return SetField<uint8_t>(VT_DISABLEINPUTIMAGE, static_cast<uint8_t>(_disableInputImage), 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VARIABLES) &&
           verifier.VerifyVector(variables()) &&
           verifier.VerifyVectorOfTables(variables()) &&
           VerifyField<uint32_t>(verifier, VT_REVISION, 4) &&
           VerifyField<uint8_t>(verifier, VT_DISABLEINPUTIMAGE, 1) &&
           verifier.EndTable();
  }
  MemoryMapT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(MemoryMapT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<MemoryMap> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const MemoryMapT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct MemoryMapBuilder {
  typedef MemoryMap Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_variables(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::Variable>>> variables) {
    fbb_.AddOffset(MemoryMap::VT_VARIABLES, variables);
  }
  void add_revision(uint32_t revision) {
    fbb_.AddElement<uint32_t>(MemoryMap::VT_REVISION, revision, 0);
  }
  void add_disableInputImage(bool disableInputImage) {
    fbb_.AddElement<uint8_t>(MemoryMap::VT_DISABLEINPUTIMAGE, static_cast<uint8_t>(disableInputImage), 0);
  }
  explicit MemoryMapBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MemoryMap> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MemoryMap>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MemoryMap> CreateMemoryMap(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::Variable>>> variables = 0,
    uint32_t revision = 0,
    bool disableInputImage = false) {
  MemoryMapBuilder builder_(_fbb);
  builder_.add_revision(revision);
  builder_.add_variables(variables);
  builder_.add_disableInputImage(disableInputImage);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<MemoryMap> CreateMemoryMapDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<::flatbuffers::Offset<comm::datalayer::Variable>> *variables = nullptr,
    uint32_t revision = 0,
    bool disableInputImage = false) {
  auto variables__ = variables ? _fbb.CreateVectorOfSortedTables<comm::datalayer::Variable>(variables) : 0;
  return comm::datalayer::CreateMemoryMap(
      _fbb,
      variables__,
      revision,
      disableInputImage);
}

::flatbuffers::Offset<MemoryMap> CreateMemoryMap(::flatbuffers::FlatBufferBuilder &_fbb, const MemoryMapT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline VariableT::VariableT(const VariableT &o)
      : name(o.name),
        bitoffset(o.bitoffset),
        bitsize(o.bitsize),
        type(o.type),
        metadata((o.metadata) ? new comm::datalayer::MetadataT(*o.metadata) : nullptr) {
}

inline VariableT &VariableT::operator=(VariableT o) FLATBUFFERS_NOEXCEPT {
  std::swap(name, o.name);
  std::swap(bitoffset, o.bitoffset);
  std::swap(bitsize, o.bitsize);
  std::swap(type, o.type);
  std::swap(metadata, o.metadata);
  return *this;
}

inline VariableT *Variable::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<VariableT>(new VariableT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Variable::UnPackTo(VariableT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = name(); if (_e) _o->name = _e->str(); }
  { auto _e = bitoffset(); _o->bitoffset = _e; }
  { auto _e = bitsize(); _o->bitsize = _e; }
  { auto _e = type(); if (_e) _o->type = _e->str(); }
  { auto _e = metadata(); if (_e) { if(_o->metadata) { _e->UnPackTo(_o->metadata.get(), _resolver); } else { _o->metadata = std::unique_ptr<comm::datalayer::MetadataT>(_e->UnPack(_resolver)); } } else if (_o->metadata) { _o->metadata.reset(); } }
}

inline ::flatbuffers::Offset<Variable> Variable::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const VariableT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateVariable(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Variable> CreateVariable(::flatbuffers::FlatBufferBuilder &_fbb, const VariableT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const VariableT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _name = _fbb.CreateString(_o->name);
  auto _bitoffset = _o->bitoffset;
  auto _bitsize = _o->bitsize;
  auto _type = _o->type.empty() ? 0 : _fbb.CreateString(_o->type);
  auto _metadata = _o->metadata ? CreateMetadata(_fbb, _o->metadata.get(), _rehasher) : 0;
  return comm::datalayer::CreateVariable(
      _fbb,
      _name,
      _bitoffset,
      _bitsize,
      _type,
      _metadata);
}

inline MemoryMapT::MemoryMapT(const MemoryMapT &o)
      : revision(o.revision),
        disableInputImage(o.disableInputImage) {
  variables.reserve(o.variables.size());
  for (const auto &variables_ : o.variables) { variables.emplace_back((variables_) ? new comm::datalayer::VariableT(*variables_) : nullptr); }
}

inline MemoryMapT &MemoryMapT::operator=(MemoryMapT o) FLATBUFFERS_NOEXCEPT {
  std::swap(variables, o.variables);
  std::swap(revision, o.revision);
  std::swap(disableInputImage, o.disableInputImage);
  return *this;
}

inline MemoryMapT *MemoryMap::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<MemoryMapT>(new MemoryMapT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void MemoryMap::UnPackTo(MemoryMapT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = variables(); if (_e) { _o->variables.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->variables[_i]) { _e->Get(_i)->UnPackTo(_o->variables[_i].get(), _resolver); } else { _o->variables[_i] = std::unique_ptr<comm::datalayer::VariableT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->variables.resize(0); } }
  { auto _e = revision(); _o->revision = _e; }
  { auto _e = disableInputImage(); _o->disableInputImage = _e; }
}

inline ::flatbuffers::Offset<MemoryMap> MemoryMap::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const MemoryMapT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateMemoryMap(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<MemoryMap> CreateMemoryMap(::flatbuffers::FlatBufferBuilder &_fbb, const MemoryMapT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const MemoryMapT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _variables = _o->variables.size() ? _fbb.CreateVector<::flatbuffers::Offset<comm::datalayer::Variable>> (_o->variables.size(), [](size_t i, _VectorArgs *__va) { return CreateVariable(*__va->__fbb, __va->__o->variables[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _revision = _o->revision;
  auto _disableInputImage = _o->disableInputImage;
  return comm::datalayer::CreateMemoryMap(
      _fbb,
      _variables,
      _revision,
      _disableInputImage);
}

inline const comm::datalayer::MemoryMap *GetMemoryMap(const void *buf) {
  return ::flatbuffers::GetRoot<comm::datalayer::MemoryMap>(buf);
}

inline const comm::datalayer::MemoryMap *GetSizePrefixedMemoryMap(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<comm::datalayer::MemoryMap>(buf);
}

inline MemoryMap *GetMutableMemoryMap(void *buf) {
  return ::flatbuffers::GetMutableRoot<MemoryMap>(buf);
}

inline comm::datalayer::MemoryMap *GetMutableSizePrefixedMemoryMap(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<comm::datalayer::MemoryMap>(buf);
}

inline bool VerifyMemoryMapBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<comm::datalayer::MemoryMap>(nullptr);
}

inline bool VerifySizePrefixedMemoryMapBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<comm::datalayer::MemoryMap>(nullptr);
}

inline void FinishMemoryMapBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::MemoryMap> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMemoryMapBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::MemoryMap> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<comm::datalayer::MemoryMapT> UnPackMemoryMap(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::MemoryMapT>(GetMemoryMap(buf)->UnPack(res));
}

inline std::unique_ptr<comm::datalayer::MemoryMapT> UnPackSizePrefixedMemoryMap(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::MemoryMapT>(GetSizePrefixedMemoryMap(buf)->UnPack(res));
}

}  // namespace datalayer
}  // namespace comm

#endif  // FLATBUFFERS_GENERATED_MEMORYMAP_COMM_DATALAYER_H_
