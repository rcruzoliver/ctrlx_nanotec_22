// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RETAINDIAGNOSIS_COMM_DATALAYER_H_
#define FLATBUFFERS_GENERATED_RETAINDIAGNOSIS_COMM_DATALAYER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 4,
             "Non-compatible flatbuffers version included");

namespace comm {
namespace datalayer {

struct RetainCorrupted;

struct RetainDiagnosis;
struct RetainDiagnosisBuilder;
struct RetainDiagnosisT;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) RetainCorrupted FLATBUFFERS_FINAL_CLASS {
 private:
  uint32_t begin_;
  uint32_t end_;

 public:
  RetainCorrupted()
      : begin_(0),
        end_(0) {
  }
  RetainCorrupted(uint32_t _begin, uint32_t _end)
      : begin_(::flatbuffers::EndianScalar(_begin)),
        end_(::flatbuffers::EndianScalar(_end)) {
  }
  /// Start byte offset of corrupted nvram area
  uint32_t begin() const {
    return ::flatbuffers::EndianScalar(begin_);
  }
  void mutate_begin(uint32_t _begin) {
    ::flatbuffers::WriteScalar(&begin_, _begin);
  }
  /// End byte offset of corrupted nvram area
  uint32_t end() const {
    return ::flatbuffers::EndianScalar(end_);
  }
  void mutate_end(uint32_t _end) {
    ::flatbuffers::WriteScalar(&end_, _end);
  }
};
FLATBUFFERS_STRUCT_END(RetainCorrupted, 8);

struct RetainDiagnosisT : public ::flatbuffers::NativeTable {
  typedef RetainDiagnosis TableType;
  std::vector<comm::datalayer::RetainCorrupted> corrupted{};
};

/// Diagnosis of nvram
struct RetainDiagnosis FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RetainDiagnosisT NativeTableType;
  typedef RetainDiagnosisBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CORRUPTED = 4
  };
  /// List of corrupted memory areas in nvram
  const ::flatbuffers::Vector<const comm::datalayer::RetainCorrupted *> *corrupted() const {
    return GetPointer<const ::flatbuffers::Vector<const comm::datalayer::RetainCorrupted *> *>(VT_CORRUPTED);
  }
  ::flatbuffers::Vector<const comm::datalayer::RetainCorrupted *> *mutable_corrupted() {
    return GetPointer<::flatbuffers::Vector<const comm::datalayer::RetainCorrupted *> *>(VT_CORRUPTED);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CORRUPTED) &&
           verifier.VerifyVector(corrupted()) &&
           verifier.EndTable();
  }
  RetainDiagnosisT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(RetainDiagnosisT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<RetainDiagnosis> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const RetainDiagnosisT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct RetainDiagnosisBuilder {
  typedef RetainDiagnosis Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_corrupted(::flatbuffers::Offset<::flatbuffers::Vector<const comm::datalayer::RetainCorrupted *>> corrupted) {
    fbb_.AddOffset(RetainDiagnosis::VT_CORRUPTED, corrupted);
  }
  explicit RetainDiagnosisBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RetainDiagnosis> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RetainDiagnosis>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RetainDiagnosis> CreateRetainDiagnosis(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<const comm::datalayer::RetainCorrupted *>> corrupted = 0) {
  RetainDiagnosisBuilder builder_(_fbb);
  builder_.add_corrupted(corrupted);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<RetainDiagnosis> CreateRetainDiagnosisDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<comm::datalayer::RetainCorrupted> *corrupted = nullptr) {
  auto corrupted__ = corrupted ? _fbb.CreateVectorOfStructs<comm::datalayer::RetainCorrupted>(*corrupted) : 0;
  return comm::datalayer::CreateRetainDiagnosis(
      _fbb,
      corrupted__);
}

::flatbuffers::Offset<RetainDiagnosis> CreateRetainDiagnosis(::flatbuffers::FlatBufferBuilder &_fbb, const RetainDiagnosisT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline RetainDiagnosisT *RetainDiagnosis::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<RetainDiagnosisT>(new RetainDiagnosisT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void RetainDiagnosis::UnPackTo(RetainDiagnosisT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = corrupted(); if (_e) { _o->corrupted.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->corrupted[_i] = *_e->Get(_i); } } else { _o->corrupted.resize(0); } }
}

inline ::flatbuffers::Offset<RetainDiagnosis> RetainDiagnosis::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const RetainDiagnosisT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateRetainDiagnosis(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<RetainDiagnosis> CreateRetainDiagnosis(::flatbuffers::FlatBufferBuilder &_fbb, const RetainDiagnosisT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const RetainDiagnosisT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _corrupted = _o->corrupted.size() ? _fbb.CreateVectorOfStructs(_o->corrupted) : 0;
  return comm::datalayer::CreateRetainDiagnosis(
      _fbb,
      _corrupted);
}

inline const comm::datalayer::RetainDiagnosis *GetRetainDiagnosis(const void *buf) {
  return ::flatbuffers::GetRoot<comm::datalayer::RetainDiagnosis>(buf);
}

inline const comm::datalayer::RetainDiagnosis *GetSizePrefixedRetainDiagnosis(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<comm::datalayer::RetainDiagnosis>(buf);
}

inline RetainDiagnosis *GetMutableRetainDiagnosis(void *buf) {
  return ::flatbuffers::GetMutableRoot<RetainDiagnosis>(buf);
}

inline comm::datalayer::RetainDiagnosis *GetMutableSizePrefixedRetainDiagnosis(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<comm::datalayer::RetainDiagnosis>(buf);
}

inline bool VerifyRetainDiagnosisBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<comm::datalayer::RetainDiagnosis>(nullptr);
}

inline bool VerifySizePrefixedRetainDiagnosisBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<comm::datalayer::RetainDiagnosis>(nullptr);
}

inline void FinishRetainDiagnosisBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::RetainDiagnosis> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRetainDiagnosisBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::RetainDiagnosis> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<comm::datalayer::RetainDiagnosisT> UnPackRetainDiagnosis(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::RetainDiagnosisT>(GetRetainDiagnosis(buf)->UnPack(res));
}

inline std::unique_ptr<comm::datalayer::RetainDiagnosisT> UnPackSizePrefixedRetainDiagnosis(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::RetainDiagnosisT>(GetSizePrefixedRetainDiagnosis(buf)->UnPack(res));
}

}  // namespace datalayer
}  // namespace comm

#endif  // FLATBUFFERS_GENERATED_RETAINDIAGNOSIS_COMM_DATALAYER_H_
