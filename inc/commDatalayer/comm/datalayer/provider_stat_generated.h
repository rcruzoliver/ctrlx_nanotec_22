// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PROVIDERSTAT_COMM_DATALAYER_H_
#define FLATBUFFERS_GENERATED_PROVIDERSTAT_COMM_DATALAYER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 4,
             "Non-compatible flatbuffers version included");

namespace comm {
namespace datalayer {

struct ProviderStat;
struct ProviderStatBuilder;
struct ProviderStatT;

struct ProviderStatT : public ::flatbuffers::NativeTable {
  typedef ProviderStat TableType;
  std::string identity{};
  std::vector<std::string> nodes{};
};

/// statistics of a provider
struct ProviderStat FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ProviderStatT NativeTableType;
  typedef ProviderStatBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IDENTITY = 4,
    VT_NODES = 6
  };
  const ::flatbuffers::String *identity() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDENTITY);
  }
  ::flatbuffers::String *mutable_identity() {
    return GetPointer<::flatbuffers::String *>(VT_IDENTITY);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *nodes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_NODES);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *mutable_nodes() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_NODES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_IDENTITY) &&
           verifier.VerifyString(identity()) &&
           VerifyOffset(verifier, VT_NODES) &&
           verifier.VerifyVector(nodes()) &&
           verifier.VerifyVectorOfStrings(nodes()) &&
           verifier.EndTable();
  }
  ProviderStatT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ProviderStatT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<ProviderStat> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ProviderStatT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ProviderStatBuilder {
  typedef ProviderStat Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_identity(::flatbuffers::Offset<::flatbuffers::String> identity) {
    fbb_.AddOffset(ProviderStat::VT_IDENTITY, identity);
  }
  void add_nodes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> nodes) {
    fbb_.AddOffset(ProviderStat::VT_NODES, nodes);
  }
  explicit ProviderStatBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ProviderStat> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ProviderStat>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ProviderStat> CreateProviderStat(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> identity = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> nodes = 0) {
  ProviderStatBuilder builder_(_fbb);
  builder_.add_nodes(nodes);
  builder_.add_identity(identity);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ProviderStat> CreateProviderStatDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *identity = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *nodes = nullptr) {
  auto identity__ = identity ? _fbb.CreateString(identity) : 0;
  auto nodes__ = nodes ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*nodes) : 0;
  return comm::datalayer::CreateProviderStat(
      _fbb,
      identity__,
      nodes__);
}

::flatbuffers::Offset<ProviderStat> CreateProviderStat(::flatbuffers::FlatBufferBuilder &_fbb, const ProviderStatT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ProviderStatT *ProviderStat::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ProviderStatT>(new ProviderStatT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ProviderStat::UnPackTo(ProviderStatT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = identity(); if (_e) _o->identity = _e->str(); }
  { auto _e = nodes(); if (_e) { _o->nodes.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->nodes[_i] = _e->Get(_i)->str(); } } else { _o->nodes.resize(0); } }
}

inline ::flatbuffers::Offset<ProviderStat> ProviderStat::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ProviderStatT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateProviderStat(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<ProviderStat> CreateProviderStat(::flatbuffers::FlatBufferBuilder &_fbb, const ProviderStatT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const ProviderStatT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _identity = _o->identity.empty() ? 0 : _fbb.CreateString(_o->identity);
  auto _nodes = _o->nodes.size() ? _fbb.CreateVectorOfStrings(_o->nodes) : 0;
  return comm::datalayer::CreateProviderStat(
      _fbb,
      _identity,
      _nodes);
}

inline const comm::datalayer::ProviderStat *GetProviderStat(const void *buf) {
  return ::flatbuffers::GetRoot<comm::datalayer::ProviderStat>(buf);
}

inline const comm::datalayer::ProviderStat *GetSizePrefixedProviderStat(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<comm::datalayer::ProviderStat>(buf);
}

inline ProviderStat *GetMutableProviderStat(void *buf) {
  return ::flatbuffers::GetMutableRoot<ProviderStat>(buf);
}

inline comm::datalayer::ProviderStat *GetMutableSizePrefixedProviderStat(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<comm::datalayer::ProviderStat>(buf);
}

inline bool VerifyProviderStatBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<comm::datalayer::ProviderStat>(nullptr);
}

inline bool VerifySizePrefixedProviderStatBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<comm::datalayer::ProviderStat>(nullptr);
}

inline void FinishProviderStatBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::ProviderStat> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedProviderStatBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::ProviderStat> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<comm::datalayer::ProviderStatT> UnPackProviderStat(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::ProviderStatT>(GetProviderStat(buf)->UnPack(res));
}

inline std::unique_ptr<comm::datalayer::ProviderStatT> UnPackSizePrefixedProviderStat(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::ProviderStatT>(GetSizePrefixedProviderStat(buf)->UnPack(res));
}

}  // namespace datalayer
}  // namespace comm

#endif  // FLATBUFFERS_GENERATED_PROVIDERSTAT_COMM_DATALAYER_H_
