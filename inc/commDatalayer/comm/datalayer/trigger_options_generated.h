// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TRIGGEROPTIONS_COMM_DATALAYER_H_
#define FLATBUFFERS_GENERATED_TRIGGEROPTIONS_COMM_DATALAYER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 4,
             "Non-compatible flatbuffers version included");

namespace comm {
namespace datalayer {

struct TriggerOptions;
struct TriggerOptionsBuilder;
struct TriggerOptionsT;

struct TriggerOptionsT : public ::flatbuffers::NativeTable {
  typedef TriggerOptions TableType;
  uint16_t queueSize = 1;
};

struct TriggerOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TriggerOptionsT NativeTableType;
  typedef TriggerOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_QUEUESIZE = 4
  };
  uint16_t queueSize() const {
    return GetField<uint16_t>(VT_QUEUESIZE, 1);
  }
  bool mutate_queueSize(uint16_t _queueSize = 1) {
    return SetField<uint16_t>(VT_QUEUESIZE, _queueSize, 1);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_QUEUESIZE, 2) &&
           verifier.EndTable();
  }
  TriggerOptionsT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(TriggerOptionsT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<TriggerOptions> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const TriggerOptionsT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct TriggerOptionsBuilder {
  typedef TriggerOptions Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_queueSize(uint16_t queueSize) {
    fbb_.AddElement<uint16_t>(TriggerOptions::VT_QUEUESIZE, queueSize, 1);
  }
  explicit TriggerOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TriggerOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TriggerOptions>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TriggerOptions> CreateTriggerOptions(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t queueSize = 1) {
  TriggerOptionsBuilder builder_(_fbb);
  builder_.add_queueSize(queueSize);
  return builder_.Finish();
}

::flatbuffers::Offset<TriggerOptions> CreateTriggerOptions(::flatbuffers::FlatBufferBuilder &_fbb, const TriggerOptionsT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline TriggerOptionsT *TriggerOptions::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<TriggerOptionsT>(new TriggerOptionsT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void TriggerOptions::UnPackTo(TriggerOptionsT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = queueSize(); _o->queueSize = _e; }
}

inline ::flatbuffers::Offset<TriggerOptions> TriggerOptions::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const TriggerOptionsT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateTriggerOptions(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<TriggerOptions> CreateTriggerOptions(::flatbuffers::FlatBufferBuilder &_fbb, const TriggerOptionsT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const TriggerOptionsT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _queueSize = _o->queueSize;
  return comm::datalayer::CreateTriggerOptions(
      _fbb,
      _queueSize);
}

inline const comm::datalayer::TriggerOptions *GetTriggerOptions(const void *buf) {
  return ::flatbuffers::GetRoot<comm::datalayer::TriggerOptions>(buf);
}

inline const comm::datalayer::TriggerOptions *GetSizePrefixedTriggerOptions(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<comm::datalayer::TriggerOptions>(buf);
}

inline TriggerOptions *GetMutableTriggerOptions(void *buf) {
  return ::flatbuffers::GetMutableRoot<TriggerOptions>(buf);
}

inline comm::datalayer::TriggerOptions *GetMutableSizePrefixedTriggerOptions(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<comm::datalayer::TriggerOptions>(buf);
}

inline bool VerifyTriggerOptionsBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<comm::datalayer::TriggerOptions>(nullptr);
}

inline bool VerifySizePrefixedTriggerOptionsBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<comm::datalayer::TriggerOptions>(nullptr);
}

inline void FinishTriggerOptionsBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::TriggerOptions> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTriggerOptionsBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::TriggerOptions> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<comm::datalayer::TriggerOptionsT> UnPackTriggerOptions(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::TriggerOptionsT>(GetTriggerOptions(buf)->UnPack(res));
}

inline std::unique_ptr<comm::datalayer::TriggerOptionsT> UnPackSizePrefixedTriggerOptions(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::TriggerOptionsT>(GetSizePrefixedTriggerOptions(buf)->UnPack(res));
}

}  // namespace datalayer
}  // namespace comm

#endif  // FLATBUFFERS_GENERATED_TRIGGEROPTIONS_COMM_DATALAYER_H_
