// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_REVERSECONNECTION_COMM_DATALAYER_REMOTE_H_
#define FLATBUFFERS_GENERATED_REVERSECONNECTION_COMM_DATALAYER_REMOTE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 4,
             "Non-compatible flatbuffers version included");

namespace comm {
namespace datalayer {
namespace remote {

struct ReverseConnection;
struct ReverseConnectionBuilder;
struct ReverseConnectionT;

struct ReverseConnectionT : public ::flatbuffers::NativeTable {
  typedef ReverseConnection TableType;
  std::string connectionId{};
  std::string connectionAddress{};
  std::string name{};
};

struct ReverseConnection FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ReverseConnectionT NativeTableType;
  typedef ReverseConnectionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CONNECTIONID = 4,
    VT_CONNECTIONADDRESS = 6,
    VT_NAME = 8
  };
  /// local id of reverse connection
  const ::flatbuffers::String *connectionId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CONNECTIONID);
  }
  ::flatbuffers::String *mutable_connectionId() {
    return GetPointer<::flatbuffers::String *>(VT_CONNECTIONID);
  }
  bool KeyCompareLessThan(const ReverseConnection * const o) const {
    return *connectionId() < *o->connectionId();
  }
  int KeyCompareWithValue(const char *_connectionId) const {
    return strcmp(connectionId()->c_str(), _connectionId);
  }
  /// address to remote control to connect to (connect string)
  const ::flatbuffers::String *connectionAddress() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CONNECTIONADDRESS);
  }
  ::flatbuffers::String *mutable_connectionAddress() {
    return GetPointer<::flatbuffers::String *>(VT_CONNECTIONADDRESS);
  }
  /// name the datalayer appears on remote server
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  ::flatbuffers::String *mutable_name() {
    return GetPointer<::flatbuffers::String *>(VT_NAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_CONNECTIONID) &&
           verifier.VerifyString(connectionId()) &&
           VerifyOffsetRequired(verifier, VT_CONNECTIONADDRESS) &&
           verifier.VerifyString(connectionAddress()) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
  ReverseConnectionT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ReverseConnectionT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<ReverseConnection> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ReverseConnectionT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ReverseConnectionBuilder {
  typedef ReverseConnection Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_connectionId(::flatbuffers::Offset<::flatbuffers::String> connectionId) {
    fbb_.AddOffset(ReverseConnection::VT_CONNECTIONID, connectionId);
  }
  void add_connectionAddress(::flatbuffers::Offset<::flatbuffers::String> connectionAddress) {
    fbb_.AddOffset(ReverseConnection::VT_CONNECTIONADDRESS, connectionAddress);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(ReverseConnection::VT_NAME, name);
  }
  explicit ReverseConnectionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ReverseConnection> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ReverseConnection>(end);
    fbb_.Required(o, ReverseConnection::VT_CONNECTIONID);
    fbb_.Required(o, ReverseConnection::VT_CONNECTIONADDRESS);
    fbb_.Required(o, ReverseConnection::VT_NAME);
    return o;
  }
};

inline ::flatbuffers::Offset<ReverseConnection> CreateReverseConnection(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> connectionId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> connectionAddress = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0) {
  ReverseConnectionBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_connectionAddress(connectionAddress);
  builder_.add_connectionId(connectionId);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ReverseConnection> CreateReverseConnectionDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *connectionId = nullptr,
    const char *connectionAddress = nullptr,
    const char *name = nullptr) {
  auto connectionId__ = connectionId ? _fbb.CreateString(connectionId) : 0;
  auto connectionAddress__ = connectionAddress ? _fbb.CreateString(connectionAddress) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return comm::datalayer::remote::CreateReverseConnection(
      _fbb,
      connectionId__,
      connectionAddress__,
      name__);
}

::flatbuffers::Offset<ReverseConnection> CreateReverseConnection(::flatbuffers::FlatBufferBuilder &_fbb, const ReverseConnectionT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ReverseConnectionT *ReverseConnection::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ReverseConnectionT>(new ReverseConnectionT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ReverseConnection::UnPackTo(ReverseConnectionT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = connectionId(); if (_e) _o->connectionId = _e->str(); }
  { auto _e = connectionAddress(); if (_e) _o->connectionAddress = _e->str(); }
  { auto _e = name(); if (_e) _o->name = _e->str(); }
}

inline ::flatbuffers::Offset<ReverseConnection> ReverseConnection::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ReverseConnectionT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateReverseConnection(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<ReverseConnection> CreateReverseConnection(::flatbuffers::FlatBufferBuilder &_fbb, const ReverseConnectionT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const ReverseConnectionT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _connectionId = _fbb.CreateString(_o->connectionId);
  auto _connectionAddress = _fbb.CreateString(_o->connectionAddress);
  auto _name = _fbb.CreateString(_o->name);
  return comm::datalayer::remote::CreateReverseConnection(
      _fbb,
      _connectionId,
      _connectionAddress,
      _name);
}

inline const comm::datalayer::remote::ReverseConnection *GetReverseConnection(const void *buf) {
  return ::flatbuffers::GetRoot<comm::datalayer::remote::ReverseConnection>(buf);
}

inline const comm::datalayer::remote::ReverseConnection *GetSizePrefixedReverseConnection(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<comm::datalayer::remote::ReverseConnection>(buf);
}

inline ReverseConnection *GetMutableReverseConnection(void *buf) {
  return ::flatbuffers::GetMutableRoot<ReverseConnection>(buf);
}

inline comm::datalayer::remote::ReverseConnection *GetMutableSizePrefixedReverseConnection(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<comm::datalayer::remote::ReverseConnection>(buf);
}

inline bool VerifyReverseConnectionBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<comm::datalayer::remote::ReverseConnection>(nullptr);
}

inline bool VerifySizePrefixedReverseConnectionBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<comm::datalayer::remote::ReverseConnection>(nullptr);
}

inline void FinishReverseConnectionBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::remote::ReverseConnection> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedReverseConnectionBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::remote::ReverseConnection> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<comm::datalayer::remote::ReverseConnectionT> UnPackReverseConnection(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::remote::ReverseConnectionT>(GetReverseConnection(buf)->UnPack(res));
}

inline std::unique_ptr<comm::datalayer::remote::ReverseConnectionT> UnPackSizePrefixedReverseConnection(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::remote::ReverseConnectionT>(GetSizePrefixedReverseConnection(buf)->UnPack(res));
}

}  // namespace remote
}  // namespace datalayer
}  // namespace comm

#endif  // FLATBUFFERS_GENERATED_REVERSECONNECTION_COMM_DATALAYER_REMOTE_H_
