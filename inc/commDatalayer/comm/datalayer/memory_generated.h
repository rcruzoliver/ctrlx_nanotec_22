// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MEMORY_COMM_DATALAYER_H_
#define FLATBUFFERS_GENERATED_MEMORY_COMM_DATALAYER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 4,
             "Non-compatible flatbuffers version included");

namespace comm {
namespace datalayer {

struct Memory;
struct MemoryBuilder;
struct MemoryT;

enum MemoryType : int8_t {
  MemoryType_Unknown = 0,
  /// data flow from owner to user
  MemoryType_Input = 1,
  /// data flow from user to owner
  MemoryType_Output = 2,
  /// shared ram in retain area
  MemoryType_SharedRetain = 3,
  /// shared ram
  MemoryType_Shared = 4,
  /// trigger input
  MemoryType_TriggerInput = 5,
  /// trigger output
  MemoryType_TriggerOutput = 6,
  MemoryType_MIN = MemoryType_Unknown,
  MemoryType_MAX = MemoryType_TriggerOutput
};

inline const MemoryType (&EnumValuesMemoryType())[7] {
  static const MemoryType values[] = {
    MemoryType_Unknown,
    MemoryType_Input,
    MemoryType_Output,
    MemoryType_SharedRetain,
    MemoryType_Shared,
    MemoryType_TriggerInput,
    MemoryType_TriggerOutput
  };
  return values;
}

inline const char * const *EnumNamesMemoryType() {
  static const char * const names[8] = {
    "Unknown",
    "Input",
    "Output",
    "SharedRetain",
    "Shared",
    "TriggerInput",
    "TriggerOutput",
    nullptr
  };
  return names;
}

inline const char *EnumNameMemoryType(MemoryType e) {
  if (::flatbuffers::IsOutRange(e, MemoryType_Unknown, MemoryType_TriggerOutput)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMemoryType()[index];
}

enum AccessType : int8_t {
  AccessType_Unknown = 0,
  AccessType_Raw = 1,
  AccessType_TripleBuffer = 2,
  AccessType_NTelBuf = 3,
  AccessType_MIN = AccessType_Unknown,
  AccessType_MAX = AccessType_NTelBuf
};

inline const AccessType (&EnumValuesAccessType())[4] {
  static const AccessType values[] = {
    AccessType_Unknown,
    AccessType_Raw,
    AccessType_TripleBuffer,
    AccessType_NTelBuf
  };
  return values;
}

inline const char * const *EnumNamesAccessType() {
  static const char * const names[5] = {
    "Unknown",
    "Raw",
    "TripleBuffer",
    "NTelBuf",
    nullptr
  };
  return names;
}

inline const char *EnumNameAccessType(AccessType e) {
  if (::flatbuffers::IsOutRange(e, AccessType_Unknown, AccessType_NTelBuf)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAccessType()[index];
}

struct MemoryT : public ::flatbuffers::NativeTable {
  typedef Memory TableType;
  comm::datalayer::MemoryType type = comm::datalayer::MemoryType_Unknown;
  std::string id{};
  uint32_t sizeBytes = 0;
  comm::datalayer::AccessType accessType = comm::datalayer::AccessType_Unknown;
};

struct Memory FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MemoryT NativeTableType;
  typedef MemoryBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_ID = 6,
    VT_SIZEBYTES = 8,
    VT_ACCESSTYPE = 10
  };
  /// memory type
  comm::datalayer::MemoryType type() const {
    return static_cast<comm::datalayer::MemoryType>(GetField<int8_t>(VT_TYPE, 0));
  }
  bool mutate_type(comm::datalayer::MemoryType _type = static_cast<comm::datalayer::MemoryType>(0)) {
    return SetField<int8_t>(VT_TYPE, static_cast<int8_t>(_type), 0);
  }
  /// identification of the memory - contains how to access memory
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  ::flatbuffers::String *mutable_id() {
    return GetPointer<::flatbuffers::String *>(VT_ID);
  }
  /// size of usable bytes of memory
  uint32_t sizeBytes() const {
    return GetField<uint32_t>(VT_SIZEBYTES, 0);
  }
  bool mutate_sizeBytes(uint32_t _sizeBytes = 0) {
    return SetField<uint32_t>(VT_SIZEBYTES, _sizeBytes, 0);
  }
  /// how to access memory
  comm::datalayer::AccessType accessType() const {
    return static_cast<comm::datalayer::AccessType>(GetField<int8_t>(VT_ACCESSTYPE, 0));
  }
  bool mutate_accessType(comm::datalayer::AccessType _accessType = static_cast<comm::datalayer::AccessType>(0)) {
    return SetField<int8_t>(VT_ACCESSTYPE, static_cast<int8_t>(_accessType), 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE, 1) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyField<uint32_t>(verifier, VT_SIZEBYTES, 4) &&
           VerifyField<int8_t>(verifier, VT_ACCESSTYPE, 1) &&
           verifier.EndTable();
  }
  MemoryT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(MemoryT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Memory> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const MemoryT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct MemoryBuilder {
  typedef Memory Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(comm::datalayer::MemoryType type) {
    fbb_.AddElement<int8_t>(Memory::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(Memory::VT_ID, id);
  }
  void add_sizeBytes(uint32_t sizeBytes) {
    fbb_.AddElement<uint32_t>(Memory::VT_SIZEBYTES, sizeBytes, 0);
  }
  void add_accessType(comm::datalayer::AccessType accessType) {
    fbb_.AddElement<int8_t>(Memory::VT_ACCESSTYPE, static_cast<int8_t>(accessType), 0);
  }
  explicit MemoryBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Memory> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Memory>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Memory> CreateMemory(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    comm::datalayer::MemoryType type = comm::datalayer::MemoryType_Unknown,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    uint32_t sizeBytes = 0,
    comm::datalayer::AccessType accessType = comm::datalayer::AccessType_Unknown) {
  MemoryBuilder builder_(_fbb);
  builder_.add_sizeBytes(sizeBytes);
  builder_.add_id(id);
  builder_.add_accessType(accessType);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Memory> CreateMemoryDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    comm::datalayer::MemoryType type = comm::datalayer::MemoryType_Unknown,
    const char *id = nullptr,
    uint32_t sizeBytes = 0,
    comm::datalayer::AccessType accessType = comm::datalayer::AccessType_Unknown) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  return comm::datalayer::CreateMemory(
      _fbb,
      type,
      id__,
      sizeBytes,
      accessType);
}

::flatbuffers::Offset<Memory> CreateMemory(::flatbuffers::FlatBufferBuilder &_fbb, const MemoryT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline MemoryT *Memory::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<MemoryT>(new MemoryT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Memory::UnPackTo(MemoryT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = type(); _o->type = _e; }
  { auto _e = id(); if (_e) _o->id = _e->str(); }
  { auto _e = sizeBytes(); _o->sizeBytes = _e; }
  { auto _e = accessType(); _o->accessType = _e; }
}

inline ::flatbuffers::Offset<Memory> Memory::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const MemoryT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateMemory(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Memory> CreateMemory(::flatbuffers::FlatBufferBuilder &_fbb, const MemoryT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const MemoryT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _type = _o->type;
  auto _id = _o->id.empty() ? 0 : _fbb.CreateString(_o->id);
  auto _sizeBytes = _o->sizeBytes;
  auto _accessType = _o->accessType;
  return comm::datalayer::CreateMemory(
      _fbb,
      _type,
      _id,
      _sizeBytes,
      _accessType);
}

inline const comm::datalayer::Memory *GetMemory(const void *buf) {
  return ::flatbuffers::GetRoot<comm::datalayer::Memory>(buf);
}

inline const comm::datalayer::Memory *GetSizePrefixedMemory(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<comm::datalayer::Memory>(buf);
}

inline Memory *GetMutableMemory(void *buf) {
  return ::flatbuffers::GetMutableRoot<Memory>(buf);
}

inline comm::datalayer::Memory *GetMutableSizePrefixedMemory(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<comm::datalayer::Memory>(buf);
}

inline bool VerifyMemoryBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<comm::datalayer::Memory>(nullptr);
}

inline bool VerifySizePrefixedMemoryBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<comm::datalayer::Memory>(nullptr);
}

inline void FinishMemoryBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::Memory> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMemoryBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::Memory> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<comm::datalayer::MemoryT> UnPackMemory(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::MemoryT>(GetMemory(buf)->UnPack(res));
}

inline std::unique_ptr<comm::datalayer::MemoryT> UnPackSizePrefixedMemory(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::MemoryT>(GetSizePrefixedMemory(buf)->UnPack(res));
}

}  // namespace datalayer
}  // namespace comm

#endif  // FLATBUFFERS_GENERATED_MEMORY_COMM_DATALAYER_H_
