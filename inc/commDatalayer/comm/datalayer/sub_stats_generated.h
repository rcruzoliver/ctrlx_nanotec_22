// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SUBSTATS_COMM_DATALAYER_H_
#define FLATBUFFERS_GENERATED_SUBSTATS_COMM_DATALAYER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 4,
             "Non-compatible flatbuffers version included");

namespace comm {
namespace datalayer {

struct SubscriptionStatistics;
struct SubscriptionStatisticsBuilder;
struct SubscriptionStatisticsT;

struct SubscriptionStatisticsT : public ::flatbuffers::NativeTable {
  typedef SubscriptionStatistics TableType;
  uint32_t numberClients = 0;
  uint32_t numberSubscriptions = 0;
  uint32_t numberSubscribedNodes = 0;
  uint32_t numberRTSubscribedNodes = 0;
};

struct SubscriptionStatistics FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SubscriptionStatisticsT NativeTableType;
  typedef SubscriptionStatisticsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NUMBERCLIENTS = 4,
    VT_NUMBERSUBSCRIPTIONS = 6,
    VT_NUMBERSUBSCRIBEDNODES = 8,
    VT_NUMBERRTSUBSCRIBEDNODES = 10
  };
  /// Number of clients with subscriptions
  uint32_t numberClients() const {
    return GetField<uint32_t>(VT_NUMBERCLIENTS, 0);
  }
  bool mutate_numberClients(uint32_t _numberClients = 0) {
    return SetField<uint32_t>(VT_NUMBERCLIENTS, _numberClients, 0);
  }
  /// Number of subscriptions
  uint32_t numberSubscriptions() const {
    return GetField<uint32_t>(VT_NUMBERSUBSCRIPTIONS, 0);
  }
  bool mutate_numberSubscriptions(uint32_t _numberSubscriptions = 0) {
    return SetField<uint32_t>(VT_NUMBERSUBSCRIPTIONS, _numberSubscriptions, 0);
  }
  /// Number of subscribed nodes;
  uint32_t numberSubscribedNodes() const {
    return GetField<uint32_t>(VT_NUMBERSUBSCRIBEDNODES, 0);
  }
  bool mutate_numberSubscribedNodes(uint32_t _numberSubscribedNodes = 0) {
    return SetField<uint32_t>(VT_NUMBERSUBSCRIBEDNODES, _numberSubscribedNodes, 0);
  }
  /// Number of realtime subscribed nodes
  uint32_t numberRTSubscribedNodes() const {
    return GetField<uint32_t>(VT_NUMBERRTSUBSCRIBEDNODES, 0);
  }
  bool mutate_numberRTSubscribedNodes(uint32_t _numberRTSubscribedNodes = 0) {
    return SetField<uint32_t>(VT_NUMBERRTSUBSCRIBEDNODES, _numberRTSubscribedNodes, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_NUMBERCLIENTS, 4) &&
           VerifyField<uint32_t>(verifier, VT_NUMBERSUBSCRIPTIONS, 4) &&
           VerifyField<uint32_t>(verifier, VT_NUMBERSUBSCRIBEDNODES, 4) &&
           VerifyField<uint32_t>(verifier, VT_NUMBERRTSUBSCRIBEDNODES, 4) &&
           verifier.EndTable();
  }
  SubscriptionStatisticsT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(SubscriptionStatisticsT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<SubscriptionStatistics> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const SubscriptionStatisticsT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct SubscriptionStatisticsBuilder {
  typedef SubscriptionStatistics Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_numberClients(uint32_t numberClients) {
    fbb_.AddElement<uint32_t>(SubscriptionStatistics::VT_NUMBERCLIENTS, numberClients, 0);
  }
  void add_numberSubscriptions(uint32_t numberSubscriptions) {
    fbb_.AddElement<uint32_t>(SubscriptionStatistics::VT_NUMBERSUBSCRIPTIONS, numberSubscriptions, 0);
  }
  void add_numberSubscribedNodes(uint32_t numberSubscribedNodes) {
    fbb_.AddElement<uint32_t>(SubscriptionStatistics::VT_NUMBERSUBSCRIBEDNODES, numberSubscribedNodes, 0);
  }
  void add_numberRTSubscribedNodes(uint32_t numberRTSubscribedNodes) {
    fbb_.AddElement<uint32_t>(SubscriptionStatistics::VT_NUMBERRTSUBSCRIBEDNODES, numberRTSubscribedNodes, 0);
  }
  explicit SubscriptionStatisticsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SubscriptionStatistics> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SubscriptionStatistics>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SubscriptionStatistics> CreateSubscriptionStatistics(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t numberClients = 0,
    uint32_t numberSubscriptions = 0,
    uint32_t numberSubscribedNodes = 0,
    uint32_t numberRTSubscribedNodes = 0) {
  SubscriptionStatisticsBuilder builder_(_fbb);
  builder_.add_numberRTSubscribedNodes(numberRTSubscribedNodes);
  builder_.add_numberSubscribedNodes(numberSubscribedNodes);
  builder_.add_numberSubscriptions(numberSubscriptions);
  builder_.add_numberClients(numberClients);
  return builder_.Finish();
}

::flatbuffers::Offset<SubscriptionStatistics> CreateSubscriptionStatistics(::flatbuffers::FlatBufferBuilder &_fbb, const SubscriptionStatisticsT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline SubscriptionStatisticsT *SubscriptionStatistics::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<SubscriptionStatisticsT>(new SubscriptionStatisticsT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void SubscriptionStatistics::UnPackTo(SubscriptionStatisticsT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = numberClients(); _o->numberClients = _e; }
  { auto _e = numberSubscriptions(); _o->numberSubscriptions = _e; }
  { auto _e = numberSubscribedNodes(); _o->numberSubscribedNodes = _e; }
  { auto _e = numberRTSubscribedNodes(); _o->numberRTSubscribedNodes = _e; }
}

inline ::flatbuffers::Offset<SubscriptionStatistics> SubscriptionStatistics::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const SubscriptionStatisticsT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateSubscriptionStatistics(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<SubscriptionStatistics> CreateSubscriptionStatistics(::flatbuffers::FlatBufferBuilder &_fbb, const SubscriptionStatisticsT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const SubscriptionStatisticsT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _numberClients = _o->numberClients;
  auto _numberSubscriptions = _o->numberSubscriptions;
  auto _numberSubscribedNodes = _o->numberSubscribedNodes;
  auto _numberRTSubscribedNodes = _o->numberRTSubscribedNodes;
  return comm::datalayer::CreateSubscriptionStatistics(
      _fbb,
      _numberClients,
      _numberSubscriptions,
      _numberSubscribedNodes,
      _numberRTSubscribedNodes);
}

inline const comm::datalayer::SubscriptionStatistics *GetSubscriptionStatistics(const void *buf) {
  return ::flatbuffers::GetRoot<comm::datalayer::SubscriptionStatistics>(buf);
}

inline const comm::datalayer::SubscriptionStatistics *GetSizePrefixedSubscriptionStatistics(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<comm::datalayer::SubscriptionStatistics>(buf);
}

inline SubscriptionStatistics *GetMutableSubscriptionStatistics(void *buf) {
  return ::flatbuffers::GetMutableRoot<SubscriptionStatistics>(buf);
}

inline comm::datalayer::SubscriptionStatistics *GetMutableSizePrefixedSubscriptionStatistics(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<comm::datalayer::SubscriptionStatistics>(buf);
}

inline bool VerifySubscriptionStatisticsBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<comm::datalayer::SubscriptionStatistics>(nullptr);
}

inline bool VerifySizePrefixedSubscriptionStatisticsBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<comm::datalayer::SubscriptionStatistics>(nullptr);
}

inline void FinishSubscriptionStatisticsBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::SubscriptionStatistics> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSubscriptionStatisticsBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::SubscriptionStatistics> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<comm::datalayer::SubscriptionStatisticsT> UnPackSubscriptionStatistics(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::SubscriptionStatisticsT>(GetSubscriptionStatistics(buf)->UnPack(res));
}

inline std::unique_ptr<comm::datalayer::SubscriptionStatisticsT> UnPackSizePrefixedSubscriptionStatistics(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::SubscriptionStatisticsT>(GetSizePrefixedSubscriptionStatistics(buf)->UnPack(res));
}

}  // namespace datalayer
}  // namespace comm

#endif  // FLATBUFFERS_GENERATED_SUBSTATS_COMM_DATALAYER_H_
